// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: manifest/protobuf/metric/server.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DeviceReportService_ReportContainer_FullMethodName = "/metric.grpc.v1.DeviceReportService/ReportContainer"
)

// DeviceReportServiceClient is the client API for DeviceReportService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceReportServiceClient interface {
	// 更新容器信息
	ReportContainer(ctx context.Context, in *DeviceData, opts ...grpc.CallOption) (*NodeRes, error)
}

type deviceReportServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceReportServiceClient(cc grpc.ClientConnInterface) DeviceReportServiceClient {
	return &deviceReportServiceClient{cc}
}

func (c *deviceReportServiceClient) ReportContainer(ctx context.Context, in *DeviceData, opts ...grpc.CallOption) (*NodeRes, error) {
	out := new(NodeRes)
	err := c.cc.Invoke(ctx, DeviceReportService_ReportContainer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceReportServiceServer is the server API for DeviceReportService service.
// All implementations must embed UnimplementedDeviceReportServiceServer
// for forward compatibility
type DeviceReportServiceServer interface {
	// 更新容器信息
	ReportContainer(context.Context, *DeviceData) (*NodeRes, error)
	mustEmbedUnimplementedDeviceReportServiceServer()
}

// UnimplementedDeviceReportServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDeviceReportServiceServer struct {
}

func (UnimplementedDeviceReportServiceServer) ReportContainer(context.Context, *DeviceData) (*NodeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportContainer not implemented")
}
func (UnimplementedDeviceReportServiceServer) mustEmbedUnimplementedDeviceReportServiceServer() {}

// UnsafeDeviceReportServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceReportServiceServer will
// result in compilation errors.
type UnsafeDeviceReportServiceServer interface {
	mustEmbedUnimplementedDeviceReportServiceServer()
}

func RegisterDeviceReportServiceServer(s grpc.ServiceRegistrar, srv DeviceReportServiceServer) {
	s.RegisterService(&DeviceReportService_ServiceDesc, srv)
}

func _DeviceReportService_ReportContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceReportServiceServer).ReportContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceReportService_ReportContainer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceReportServiceServer).ReportContainer(ctx, req.(*DeviceData))
	}
	return interceptor(ctx, in, info, handler)
}

// DeviceReportService_ServiceDesc is the grpc.ServiceDesc for DeviceReportService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceReportService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "metric.grpc.v1.DeviceReportService",
	HandlerType: (*DeviceReportServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportContainer",
			Handler:    _DeviceReportService_ReportContainer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "manifest/protobuf/metric/server.proto",
}
