// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: manifest/protobuf/daemonize/v1/controller.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AgentControllerService_AgentRegister_FullMethodName       = "/daemonize.grpc.v1.AgentControllerService/AgentRegister"
	AgentControllerService_AgentUnregister_FullMethodName     = "/daemonize.grpc.v1.AgentControllerService/AgentUnregister"
	AgentControllerService_AgentHeartbeat_FullMethodName      = "/daemonize.grpc.v1.AgentControllerService/AgentHeartbeat"
	AgentControllerService_AgentOperate_FullMethodName        = "/daemonize.grpc.v1.AgentControllerService/AgentOperate"
	AgentControllerService_AgentGetConfig_FullMethodName      = "/daemonize.grpc.v1.AgentControllerService/AgentGetConfig"
	AgentControllerService_AgentOperateProcess_FullMethodName = "/daemonize.grpc.v1.AgentControllerService/AgentOperateProcess"
)

// AgentControllerServiceClient is the client API for AgentControllerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentControllerServiceClient interface {
	// 注册 agent
	AgentRegister(ctx context.Context, in *AgentRegisterReq, opts ...grpc.CallOption) (*AgentRegisterRes, error)
	// 注销 agent
	AgentUnregister(ctx context.Context, in *AgentUnregisterReq, opts ...grpc.CallOption) (*AgentUnregisterRes, error)
	// agent 心跳
	AgentHeartbeat(ctx context.Context, in *AgentHeartbeatReq, opts ...grpc.CallOption) (*AgentHeartbeatRes, error)
	// 操作agent stream长连接
	AgentOperate(ctx context.Context, in *AgentOperateReq, opts ...grpc.CallOption) (AgentControllerService_AgentOperateClient, error)
	// 获取配置
	AgentGetConfig(ctx context.Context, in *AgentGetConfigReq, opts ...grpc.CallOption) (*AgentGetConfigRes, error)
	// 操作agent的子进程 广播使用
	AgentOperateProcess(ctx context.Context, in *AgentOperateProcessReq, opts ...grpc.CallOption) (*AgentOperateProcessRes, error)
}

type agentControllerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentControllerServiceClient(cc grpc.ClientConnInterface) AgentControllerServiceClient {
	return &agentControllerServiceClient{cc}
}

func (c *agentControllerServiceClient) AgentRegister(ctx context.Context, in *AgentRegisterReq, opts ...grpc.CallOption) (*AgentRegisterRes, error) {
	out := new(AgentRegisterRes)
	err := c.cc.Invoke(ctx, AgentControllerService_AgentRegister_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentControllerServiceClient) AgentUnregister(ctx context.Context, in *AgentUnregisterReq, opts ...grpc.CallOption) (*AgentUnregisterRes, error) {
	out := new(AgentUnregisterRes)
	err := c.cc.Invoke(ctx, AgentControllerService_AgentUnregister_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentControllerServiceClient) AgentHeartbeat(ctx context.Context, in *AgentHeartbeatReq, opts ...grpc.CallOption) (*AgentHeartbeatRes, error) {
	out := new(AgentHeartbeatRes)
	err := c.cc.Invoke(ctx, AgentControllerService_AgentHeartbeat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentControllerServiceClient) AgentOperate(ctx context.Context, in *AgentOperateReq, opts ...grpc.CallOption) (AgentControllerService_AgentOperateClient, error) {
	stream, err := c.cc.NewStream(ctx, &AgentControllerService_ServiceDesc.Streams[0], AgentControllerService_AgentOperate_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &agentControllerServiceAgentOperateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AgentControllerService_AgentOperateClient interface {
	Recv() (*AgentOperateRes, error)
	grpc.ClientStream
}

type agentControllerServiceAgentOperateClient struct {
	grpc.ClientStream
}

func (x *agentControllerServiceAgentOperateClient) Recv() (*AgentOperateRes, error) {
	m := new(AgentOperateRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agentControllerServiceClient) AgentGetConfig(ctx context.Context, in *AgentGetConfigReq, opts ...grpc.CallOption) (*AgentGetConfigRes, error) {
	out := new(AgentGetConfigRes)
	err := c.cc.Invoke(ctx, AgentControllerService_AgentGetConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentControllerServiceClient) AgentOperateProcess(ctx context.Context, in *AgentOperateProcessReq, opts ...grpc.CallOption) (*AgentOperateProcessRes, error) {
	out := new(AgentOperateProcessRes)
	err := c.cc.Invoke(ctx, AgentControllerService_AgentOperateProcess_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentControllerServiceServer is the server API for AgentControllerService service.
// All implementations must embed UnimplementedAgentControllerServiceServer
// for forward compatibility
type AgentControllerServiceServer interface {
	// 注册 agent
	AgentRegister(context.Context, *AgentRegisterReq) (*AgentRegisterRes, error)
	// 注销 agent
	AgentUnregister(context.Context, *AgentUnregisterReq) (*AgentUnregisterRes, error)
	// agent 心跳
	AgentHeartbeat(context.Context, *AgentHeartbeatReq) (*AgentHeartbeatRes, error)
	// 操作agent stream长连接
	AgentOperate(*AgentOperateReq, AgentControllerService_AgentOperateServer) error
	// 获取配置
	AgentGetConfig(context.Context, *AgentGetConfigReq) (*AgentGetConfigRes, error)
	// 操作agent的子进程 广播使用
	AgentOperateProcess(context.Context, *AgentOperateProcessReq) (*AgentOperateProcessRes, error)
	mustEmbedUnimplementedAgentControllerServiceServer()
}

// UnimplementedAgentControllerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAgentControllerServiceServer struct {
}

func (UnimplementedAgentControllerServiceServer) AgentRegister(context.Context, *AgentRegisterReq) (*AgentRegisterRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentRegister not implemented")
}
func (UnimplementedAgentControllerServiceServer) AgentUnregister(context.Context, *AgentUnregisterReq) (*AgentUnregisterRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentUnregister not implemented")
}
func (UnimplementedAgentControllerServiceServer) AgentHeartbeat(context.Context, *AgentHeartbeatReq) (*AgentHeartbeatRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentHeartbeat not implemented")
}
func (UnimplementedAgentControllerServiceServer) AgentOperate(*AgentOperateReq, AgentControllerService_AgentOperateServer) error {
	return status.Errorf(codes.Unimplemented, "method AgentOperate not implemented")
}
func (UnimplementedAgentControllerServiceServer) AgentGetConfig(context.Context, *AgentGetConfigReq) (*AgentGetConfigRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentGetConfig not implemented")
}
func (UnimplementedAgentControllerServiceServer) AgentOperateProcess(context.Context, *AgentOperateProcessReq) (*AgentOperateProcessRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentOperateProcess not implemented")
}
func (UnimplementedAgentControllerServiceServer) mustEmbedUnimplementedAgentControllerServiceServer() {
}

// UnsafeAgentControllerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentControllerServiceServer will
// result in compilation errors.
type UnsafeAgentControllerServiceServer interface {
	mustEmbedUnimplementedAgentControllerServiceServer()
}

func RegisterAgentControllerServiceServer(s grpc.ServiceRegistrar, srv AgentControllerServiceServer) {
	s.RegisterService(&AgentControllerService_ServiceDesc, srv)
}

func _AgentControllerService_AgentRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentRegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentControllerServiceServer).AgentRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentControllerService_AgentRegister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentControllerServiceServer).AgentRegister(ctx, req.(*AgentRegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentControllerService_AgentUnregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentUnregisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentControllerServiceServer).AgentUnregister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentControllerService_AgentUnregister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentControllerServiceServer).AgentUnregister(ctx, req.(*AgentUnregisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentControllerService_AgentHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentHeartbeatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentControllerServiceServer).AgentHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentControllerService_AgentHeartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentControllerServiceServer).AgentHeartbeat(ctx, req.(*AgentHeartbeatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentControllerService_AgentOperate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AgentOperateReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentControllerServiceServer).AgentOperate(m, &agentControllerServiceAgentOperateServer{stream})
}

type AgentControllerService_AgentOperateServer interface {
	Send(*AgentOperateRes) error
	grpc.ServerStream
}

type agentControllerServiceAgentOperateServer struct {
	grpc.ServerStream
}

func (x *agentControllerServiceAgentOperateServer) Send(m *AgentOperateRes) error {
	return x.ServerStream.SendMsg(m)
}

func _AgentControllerService_AgentGetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentGetConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentControllerServiceServer).AgentGetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentControllerService_AgentGetConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentControllerServiceServer).AgentGetConfig(ctx, req.(*AgentGetConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentControllerService_AgentOperateProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentOperateProcessReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentControllerServiceServer).AgentOperateProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentControllerService_AgentOperateProcess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentControllerServiceServer).AgentOperateProcess(ctx, req.(*AgentOperateProcessReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AgentControllerService_ServiceDesc is the grpc.ServiceDesc for AgentControllerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgentControllerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "daemonize.grpc.v1.AgentControllerService",
	HandlerType: (*AgentControllerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AgentRegister",
			Handler:    _AgentControllerService_AgentRegister_Handler,
		},
		{
			MethodName: "AgentUnregister",
			Handler:    _AgentControllerService_AgentUnregister_Handler,
		},
		{
			MethodName: "AgentHeartbeat",
			Handler:    _AgentControllerService_AgentHeartbeat_Handler,
		},
		{
			MethodName: "AgentGetConfig",
			Handler:    _AgentControllerService_AgentGetConfig_Handler,
		},
		{
			MethodName: "AgentOperateProcess",
			Handler:    _AgentControllerService_AgentOperateProcess_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AgentOperate",
			Handler:       _AgentControllerService_AgentOperate_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "manifest/protobuf/daemonize/v1/controller.proto",
}
