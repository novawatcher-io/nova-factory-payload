// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v4.25.1
// source: manifest/protobuf/daemonize/v1/daemonize.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NetworkConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ip
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// 端口
	Port uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *NetworkConfig) Reset() {
	*x = NetworkConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manifest_protobuf_daemonize_v1_daemonize_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkConfig) ProtoMessage() {}

func (x *NetworkConfig) ProtoReflect() protoreflect.Message {
	mi := &file_manifest_protobuf_daemonize_v1_daemonize_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkConfig.ProtoReflect.Descriptor instead.
func (*NetworkConfig) Descriptor() ([]byte, []int) {
	return file_manifest_protobuf_daemonize_v1_daemonize_proto_rawDescGZIP(), []int{0}
}

func (x *NetworkConfig) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *NetworkConfig) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

// CGroup 配置，限制CPU内存
type CGroupConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 内存限制
	Memory float32 `protobuf:"fixed32,1,opt,name=memory,proto3" json:"memory,omitempty"`
	// cpu限制
	Cpu float32 `protobuf:"fixed32,2,opt,name=cpu,proto3" json:"cpu,omitempty"`
	// 启用/禁用
	Enabled bool `protobuf:"varint,3,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// 限制策略名称
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *CGroupConfig) Reset() {
	*x = CGroupConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manifest_protobuf_daemonize_v1_daemonize_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGroupConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGroupConfig) ProtoMessage() {}

func (x *CGroupConfig) ProtoReflect() protoreflect.Message {
	mi := &file_manifest_protobuf_daemonize_v1_daemonize_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGroupConfig.ProtoReflect.Descriptor instead.
func (*CGroupConfig) Descriptor() ([]byte, []int) {
	return file_manifest_protobuf_daemonize_v1_daemonize_proto_rawDescGZIP(), []int{1}
}

func (x *CGroupConfig) GetMemory() float32 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *CGroupConfig) GetCpu() float32 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *CGroupConfig) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *CGroupConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ProcessConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 进程名字 (*)
	ProcessName string `protobuf:"bytes,1,opt,name=process_name,json=processName,proto3" json:"process_name,omitempty"`
	// 启动命令 (*)
	Command string `protobuf:"bytes,2,opt,name=command,proto3" json:"command,omitempty"`
	// 自动重启
	Autostart bool `protobuf:"varint,3,opt,name=autostart,proto3" json:"autostart,omitempty"`
	// 启动用户
	User string `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`
	// 启动进程数
	Numprocs uint32 `protobuf:"varint,5,opt,name=numprocs,proto3" json:"numprocs,omitempty"`
	// 停止信号
	StopSignal int64 `protobuf:"varint,6,opt,name=stop_signal,json=stopSignal,proto3" json:"stop_signal,omitempty"`
	// 停止信号发出后默认等待多久，超时后直接kill
	StopWaitSecs uint64 `protobuf:"varint,7,opt,name=stop_wait_secs,json=stopWaitSecs,proto3" json:"stop_wait_secs,omitempty"`
	// 是否停止整个进程组
	StopAsGroup bool `protobuf:"varint,8,opt,name=stop_as_group,json=stopAsGroup,proto3" json:"stop_as_group,omitempty"`
	// 标准错误输出是否重定向
	RedirectStderr bool `protobuf:"varint,9,opt,name=redirect_stderr,json=redirectStderr,proto3" json:"redirect_stderr,omitempty"`
	// 标注输出位置
	StdoutLogfile string `protobuf:"bytes,10,opt,name=stdout_logfile,json=stdoutLogfile,proto3" json:"stdout_logfile,omitempty"`
	// 是否启动
	Enabled bool `protobuf:"varint,11,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// 限制策略
	Cgroup *CGroupConfig `protobuf:"bytes,12,opt,name=cgroup,proto3" json:"cgroup,omitempty"`
	// 配置内容
	Config string `protobuf:"bytes,13,opt,name=config,proto3" json:"config,omitempty"`
	// 配置路径 (*)
	ConfigPath string `protobuf:"bytes,14,opt,name=config_path,json=configPath,proto3" json:"config_path,omitempty"`
	// 配置版本
	ConfigVersion string `protobuf:"bytes,15,opt,name=config_version,json=configVersion,proto3" json:"config_version,omitempty"`
}

func (x *ProcessConfig) Reset() {
	*x = ProcessConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manifest_protobuf_daemonize_v1_daemonize_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessConfig) ProtoMessage() {}

func (x *ProcessConfig) ProtoReflect() protoreflect.Message {
	mi := &file_manifest_protobuf_daemonize_v1_daemonize_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessConfig.ProtoReflect.Descriptor instead.
func (*ProcessConfig) Descriptor() ([]byte, []int) {
	return file_manifest_protobuf_daemonize_v1_daemonize_proto_rawDescGZIP(), []int{2}
}

func (x *ProcessConfig) GetProcessName() string {
	if x != nil {
		return x.ProcessName
	}
	return ""
}

func (x *ProcessConfig) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *ProcessConfig) GetAutostart() bool {
	if x != nil {
		return x.Autostart
	}
	return false
}

func (x *ProcessConfig) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *ProcessConfig) GetNumprocs() uint32 {
	if x != nil {
		return x.Numprocs
	}
	return 0
}

func (x *ProcessConfig) GetStopSignal() int64 {
	if x != nil {
		return x.StopSignal
	}
	return 0
}

func (x *ProcessConfig) GetStopWaitSecs() uint64 {
	if x != nil {
		return x.StopWaitSecs
	}
	return 0
}

func (x *ProcessConfig) GetStopAsGroup() bool {
	if x != nil {
		return x.StopAsGroup
	}
	return false
}

func (x *ProcessConfig) GetRedirectStderr() bool {
	if x != nil {
		return x.RedirectStderr
	}
	return false
}

func (x *ProcessConfig) GetStdoutLogfile() string {
	if x != nil {
		return x.StdoutLogfile
	}
	return ""
}

func (x *ProcessConfig) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ProcessConfig) GetCgroup() *CGroupConfig {
	if x != nil {
		return x.Cgroup
	}
	return nil
}

func (x *ProcessConfig) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

func (x *ProcessConfig) GetConfigPath() string {
	if x != nil {
		return x.ConfigPath
	}
	return ""
}

func (x *ProcessConfig) GetConfigVersion() string {
	if x != nil {
		return x.ConfigVersion
	}
	return ""
}

type HttpHealthConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 监控检查地址
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *HttpHealthConfig) Reset() {
	*x = HttpHealthConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manifest_protobuf_daemonize_v1_daemonize_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpHealthConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpHealthConfig) ProtoMessage() {}

func (x *HttpHealthConfig) ProtoReflect() protoreflect.Message {
	mi := &file_manifest_protobuf_daemonize_v1_daemonize_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpHealthConfig.ProtoReflect.Descriptor instead.
func (*HttpHealthConfig) Descriptor() ([]byte, []int) {
	return file_manifest_protobuf_daemonize_v1_daemonize_proto_rawDescGZIP(), []int{3}
}

func (x *HttpHealthConfig) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type HttpMetricConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// metric地址
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *HttpMetricConfig) Reset() {
	*x = HttpMetricConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manifest_protobuf_daemonize_v1_daemonize_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpMetricConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpMetricConfig) ProtoMessage() {}

func (x *HttpMetricConfig) ProtoReflect() protoreflect.Message {
	mi := &file_manifest_protobuf_daemonize_v1_daemonize_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpMetricConfig.ProtoReflect.Descriptor instead.
func (*HttpMetricConfig) Descriptor() ([]byte, []int) {
	return file_manifest_protobuf_daemonize_v1_daemonize_proto_rawDescGZIP(), []int{4}
}

func (x *HttpMetricConfig) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type HttpServerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// http服务器ip
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// http服务器端口
	Port uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	// 健康检查配置
	HealthConfig *HttpHealthConfig `protobuf:"bytes,3,opt,name=health_config,json=healthConfig,proto3" json:"health_config,omitempty"`
	// 指标配置
	HttpMetricConfig *HttpMetricConfig `protobuf:"bytes,4,opt,name=http_metric_config,json=httpMetricConfig,proto3" json:"http_metric_config,omitempty"`
}

func (x *HttpServerConfig) Reset() {
	*x = HttpServerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manifest_protobuf_daemonize_v1_daemonize_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpServerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpServerConfig) ProtoMessage() {}

func (x *HttpServerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_manifest_protobuf_daemonize_v1_daemonize_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpServerConfig.ProtoReflect.Descriptor instead.
func (*HttpServerConfig) Descriptor() ([]byte, []int) {
	return file_manifest_protobuf_daemonize_v1_daemonize_proto_rawDescGZIP(), []int{5}
}

func (x *HttpServerConfig) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *HttpServerConfig) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *HttpServerConfig) GetHealthConfig() *HttpHealthConfig {
	if x != nil {
		return x.HealthConfig
	}
	return nil
}

func (x *HttpServerConfig) GetHttpMetricConfig() *HttpMetricConfig {
	if x != nil {
		return x.HttpMetricConfig
	}
	return nil
}

type ReloadConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 重载配置时间
	Timeout uint32 `protobuf:"varint,5,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *ReloadConfig) Reset() {
	*x = ReloadConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manifest_protobuf_daemonize_v1_daemonize_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReloadConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReloadConfig) ProtoMessage() {}

func (x *ReloadConfig) ProtoReflect() protoreflect.Message {
	mi := &file_manifest_protobuf_daemonize_v1_daemonize_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReloadConfig.ProtoReflect.Descriptor instead.
func (*ReloadConfig) Descriptor() ([]byte, []int) {
	return file_manifest_protobuf_daemonize_v1_daemonize_proto_rawDescGZIP(), []int{6}
}

func (x *ReloadConfig) GetTimeout() uint32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

type ManagerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 服务器地址 (*)
	Network *NetworkConfig `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	// 进程列表
	Service []*ProcessConfig `protobuf:"bytes,2,rep,name=service,proto3" json:"service,omitempty"`
	// 日志等级
	LogLevel string `protobuf:"bytes,3,opt,name=log_level,json=logLevel,proto3" json:"log_level,omitempty"`
	// 全局限制策略
	Cgroup           *CGroupConfig `protobuf:"bytes,4,opt,name=cgroup,proto3" json:"cgroup,omitempty"`
	CgroupsHierarchy string        `protobuf:"bytes,5,opt,name=cgroups_hierarchy,json=cgroupsHierarchy,proto3" json:"cgroups_hierarchy,omitempty"`
	// http服务器配置
	HttpServer *HttpServerConfig `protobuf:"bytes,6,opt,name=http_server,json=httpServer,proto3" json:"http_server,omitempty"`
	// 重载配置
	Reload *ReloadConfig `protobuf:"bytes,7,opt,name=reload,proto3" json:"reload,omitempty"`
	// 公司uuid, 不支持运行时更新, 需要停止服务更新
	CompanyUuid string `protobuf:"bytes,8,opt,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty"`
	// 版本, 不支持运行时更新, 需要停止服务更新
	Version string `protobuf:"bytes,9,opt,name=version,proto3" json:"version,omitempty"`
	// 日志保存路径, 有两个特殊值: 'stdout': 标准输出, 'syslog': 系统日志; 其他值必须是绝对路径;
	LogPath string `protobuf:"bytes,10,opt,name=log_path,json=logPath,proto3" json:"log_path,omitempty"`
	// watchermen进入daemon模式; 不支持运行时更新, 需要停止服务更新
	Daemon bool `protobuf:"varint,11,opt,name=daemon,proto3" json:"daemon,omitempty"`
	// 上报ip时优先考虑的网卡, 如果该网口不存在, 则使用随机值; 不支持运行时更新, 需要停止服务更新
	NetworkInterface string `protobuf:"bytes,12,opt,name=network_interface,json=networkInterface,proto3" json:"network_interface,omitempty"`
}

func (x *ManagerConfig) Reset() {
	*x = ManagerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manifest_protobuf_daemonize_v1_daemonize_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagerConfig) ProtoMessage() {}

func (x *ManagerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_manifest_protobuf_daemonize_v1_daemonize_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagerConfig.ProtoReflect.Descriptor instead.
func (*ManagerConfig) Descriptor() ([]byte, []int) {
	return file_manifest_protobuf_daemonize_v1_daemonize_proto_rawDescGZIP(), []int{7}
}

func (x *ManagerConfig) GetNetwork() *NetworkConfig {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *ManagerConfig) GetService() []*ProcessConfig {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *ManagerConfig) GetLogLevel() string {
	if x != nil {
		return x.LogLevel
	}
	return ""
}

func (x *ManagerConfig) GetCgroup() *CGroupConfig {
	if x != nil {
		return x.Cgroup
	}
	return nil
}

func (x *ManagerConfig) GetCgroupsHierarchy() string {
	if x != nil {
		return x.CgroupsHierarchy
	}
	return ""
}

func (x *ManagerConfig) GetHttpServer() *HttpServerConfig {
	if x != nil {
		return x.HttpServer
	}
	return nil
}

func (x *ManagerConfig) GetReload() *ReloadConfig {
	if x != nil {
		return x.Reload
	}
	return nil
}

func (x *ManagerConfig) GetCompanyUuid() string {
	if x != nil {
		return x.CompanyUuid
	}
	return ""
}

func (x *ManagerConfig) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ManagerConfig) GetLogPath() string {
	if x != nil {
		return x.LogPath
	}
	return ""
}

func (x *ManagerConfig) GetDaemon() bool {
	if x != nil {
		return x.Daemon
	}
	return false
}

func (x *ManagerConfig) GetNetworkInterface() string {
	if x != nil {
		return x.NetworkInterface
	}
	return ""
}

var File_manifest_protobuf_daemonize_v1_daemonize_proto protoreflect.FileDescriptor

var file_manifest_protobuf_daemonize_v1_daemonize_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2f, 0x76, 0x31,
	0x2f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x11, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x76, 0x31, 0x22, 0x37, 0x0a, 0x0d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x66, 0x0a, 0x0c,
	0x43, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x88, 0x04, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x75, 0x6d, 0x70, 0x72, 0x6f, 0x63,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x70, 0x72, 0x6f, 0x63,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x70, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f,
	0x73, 0x65, 0x63, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x73, 0x74, 0x6f, 0x70,
	0x57, 0x61, 0x69, 0x74, 0x53, 0x65, 0x63, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x70,
	0x5f, 0x61, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x73, 0x74, 0x6f, 0x70, 0x41, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x27, 0x0a, 0x0f,
	0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x53,
	0x74, 0x64, 0x65, 0x72, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x5f,
	0x6c, 0x6f, 0x67, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x74, 0x64, 0x6f, 0x75, 0x74, 0x4c, 0x6f, 0x67, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x06, 0x63, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x69,
	0x7a, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x74, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x26, 0x0a, 0x10, 0x48, 0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x26, 0x0a, 0x10, 0x48, 0x74, 0x74, 0x70, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22,
	0xd7, 0x01, 0x0a, 0x10, 0x48, 0x74, 0x74, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x48, 0x0a, 0x0d,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x51, 0x0a, 0x12, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x10, 0x68, 0x74, 0x74, 0x70, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x28, 0x0a, 0x0c, 0x52, 0x65, 0x6c,
	0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x22, 0xa6, 0x04, 0x0a, 0x0d, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3a, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x69,
	0x7a, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x12, 0x3a, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x37, 0x0a, 0x06, 0x63, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x61, 0x65,
	0x6d, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x68,
	0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x63, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79,
	0x12, 0x44, 0x0a, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x7a,
	0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x68, 0x74, 0x74, 0x70,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x06, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x69,
	0x7a, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x6f, 0x61,
	0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08,
	0x6c, 0x6f, 0x67, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6c, 0x6f, 0x67, 0x50, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x61, 0x65, 0x6d, 0x6f,
	0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x12,
	0x2b, 0x0a, 0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x42, 0x13, 0x5a, 0x11,
	0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x76,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_manifest_protobuf_daemonize_v1_daemonize_proto_rawDescOnce sync.Once
	file_manifest_protobuf_daemonize_v1_daemonize_proto_rawDescData = file_manifest_protobuf_daemonize_v1_daemonize_proto_rawDesc
)

func file_manifest_protobuf_daemonize_v1_daemonize_proto_rawDescGZIP() []byte {
	file_manifest_protobuf_daemonize_v1_daemonize_proto_rawDescOnce.Do(func() {
		file_manifest_protobuf_daemonize_v1_daemonize_proto_rawDescData = protoimpl.X.CompressGZIP(file_manifest_protobuf_daemonize_v1_daemonize_proto_rawDescData)
	})
	return file_manifest_protobuf_daemonize_v1_daemonize_proto_rawDescData
}

var file_manifest_protobuf_daemonize_v1_daemonize_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_manifest_protobuf_daemonize_v1_daemonize_proto_goTypes = []interface{}{
	(*NetworkConfig)(nil),    // 0: daemonize.grpc.v1.NetworkConfig
	(*CGroupConfig)(nil),     // 1: daemonize.grpc.v1.CGroupConfig
	(*ProcessConfig)(nil),    // 2: daemonize.grpc.v1.ProcessConfig
	(*HttpHealthConfig)(nil), // 3: daemonize.grpc.v1.HttpHealthConfig
	(*HttpMetricConfig)(nil), // 4: daemonize.grpc.v1.HttpMetricConfig
	(*HttpServerConfig)(nil), // 5: daemonize.grpc.v1.HttpServerConfig
	(*ReloadConfig)(nil),     // 6: daemonize.grpc.v1.ReloadConfig
	(*ManagerConfig)(nil),    // 7: daemonize.grpc.v1.ManagerConfig
}
var file_manifest_protobuf_daemonize_v1_daemonize_proto_depIdxs = []int32{
	1, // 0: daemonize.grpc.v1.ProcessConfig.cgroup:type_name -> daemonize.grpc.v1.CGroupConfig
	3, // 1: daemonize.grpc.v1.HttpServerConfig.health_config:type_name -> daemonize.grpc.v1.HttpHealthConfig
	4, // 2: daemonize.grpc.v1.HttpServerConfig.http_metric_config:type_name -> daemonize.grpc.v1.HttpMetricConfig
	0, // 3: daemonize.grpc.v1.ManagerConfig.network:type_name -> daemonize.grpc.v1.NetworkConfig
	2, // 4: daemonize.grpc.v1.ManagerConfig.service:type_name -> daemonize.grpc.v1.ProcessConfig
	1, // 5: daemonize.grpc.v1.ManagerConfig.cgroup:type_name -> daemonize.grpc.v1.CGroupConfig
	5, // 6: daemonize.grpc.v1.ManagerConfig.http_server:type_name -> daemonize.grpc.v1.HttpServerConfig
	6, // 7: daemonize.grpc.v1.ManagerConfig.reload:type_name -> daemonize.grpc.v1.ReloadConfig
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_manifest_protobuf_daemonize_v1_daemonize_proto_init() }
func file_manifest_protobuf_daemonize_v1_daemonize_proto_init() {
	if File_manifest_protobuf_daemonize_v1_daemonize_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_manifest_protobuf_daemonize_v1_daemonize_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manifest_protobuf_daemonize_v1_daemonize_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CGroupConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manifest_protobuf_daemonize_v1_daemonize_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manifest_protobuf_daemonize_v1_daemonize_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpHealthConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manifest_protobuf_daemonize_v1_daemonize_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpMetricConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manifest_protobuf_daemonize_v1_daemonize_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpServerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manifest_protobuf_daemonize_v1_daemonize_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReloadConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manifest_protobuf_daemonize_v1_daemonize_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_manifest_protobuf_daemonize_v1_daemonize_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_manifest_protobuf_daemonize_v1_daemonize_proto_goTypes,
		DependencyIndexes: file_manifest_protobuf_daemonize_v1_daemonize_proto_depIdxs,
		MessageInfos:      file_manifest_protobuf_daemonize_v1_daemonize_proto_msgTypes,
	}.Build()
	File_manifest_protobuf_daemonize_v1_daemonize_proto = out.File
	file_manifest_protobuf_daemonize_v1_daemonize_proto_rawDesc = nil
	file_manifest_protobuf_daemonize_v1_daemonize_proto_goTypes = nil
	file_manifest_protobuf_daemonize_v1_daemonize_proto_depIdxs = nil
}
